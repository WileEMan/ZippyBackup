/** ZippyBackup
 *  Copyright (C) 2012-2016 by Wiley Black.  All rights reserved.
 *  See License.txt for licensing rules.
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Globalization;
using System.Reflection;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.Win32;
using Ionic.Zip;
using System.Runtime.InteropServices;

namespace ZippyBackup.User_Interface
{
    public partial class MainForm : ZippyForm
    {
        #region "Overall Window Management"

        public enum States
        {
            Unknown,

            /// <summary>
            /// The Loading state is set until the Load() event handler is mostly complete.  It is used to
            /// identify events that were generated internally from initialization settings vs. events
            /// generated by actual user interaction.
            /// </summary>
            Loading,

            BackupInProgress,

            Idle
        }

        States State = States.Loading;

        /// <summary>
        /// True if launched with the /tray command-line option.  This should cause the form to load
        /// directly into the system tray and not appear until requested by the user (or if an issue
        /// occurs).
        /// </summary>
        bool TrayStart;

        /// <summary>
        /// Pressing the [X] button will minimize to the tray.  To close the form, the user must
        /// go to the tray icon context menu and select exit, which will set AllowClose to true
        /// prior to starting the form closing event.
        /// </summary>
        bool AllowClose = false;

        NotifyIcon TrayIcon;
        ContextMenu TrayMenu;
        ListBoxWithIcons listBackups;        

        #endregion

        #region "Configuration and State"

        // There are a few lines of code in MainForm_Load() that copies the old app key to the new and deletes
        // the old.  Someday it can be removed.
        private static string OldAppKey1 = "HKEY_CURRENT_USER\\Wiley Black's Software\\ZipBackup";
        private static string OldAppKey2 = "HKEY_CURRENT_USER\\Software\\Wiley Black's Software\\ZipBackup";
        private static string AppKey = "HKEY_CURRENT_USER\\Software\\Wiley Black's Software\\ZippyBackup";
        public string Configuration
        {
            get { 
                string ret = (string)Registry.GetValue(AppKey, "Configuration", null);
                if (ret == null)
                {
                        // Try old keys...
                    ret = (string)Registry.GetValue(OldAppKey2, "Configuration", null);
                    if (ret == null)
                        ret = (string)Registry.GetValue(OldAppKey1, "Configuration", null);
                }
                return ret;
            }
            set { 
                Registry.SetValue(AppKey, "Configuration", value); 
            }
        }
        
        public DateTime LastUpdateCheck
        {
            get { 
                string ss = (string)Registry.GetValue(AppKey, "LastUpdateCheck", null);
                if (ss == null) return DateTime.MinValue;
                DateTime dt;
                if (!DateTime.TryParse(ss, out dt)) return DateTime.MinValue;
                else return dt;
            }
            set
            {
                Registry.SetValue(AppKey, "LastUpdateCheck", value.ToString());
            }
        }

        public DateTime LastReminderEMail
        {
            get
            {
                string ss = (string)Registry.GetValue(AppKey, "LastReminderEMail", null);
                if (ss == null) return DateTime.MinValue;
                DateTime dt;
                if (!DateTime.TryParse(ss, out dt)) return DateTime.MinValue;
                else return dt;
            }
            set
            {
                Registry.SetValue(AppKey, "LastReminderEMail", value.ToString());
            }
        }

        void LoadConfig(SplashForm Splash)
        {
            base.LoadConfig(Configuration, Splash);
        }

        new void SaveConfig()
        {
            Configuration = base.SaveConfig();
        }

        public void ImportConfig(string Filename)
        {
            try
            {
                base.LoadConfigFromFile(Filename);

                LoadScheduleTab();
                UpdateGUI();
                MessageBox.Show("Import successful.");
            }
            catch (Exception exc)
            {
                MessageBox.Show("Unable to import configuration:  " + exc.Message);
                LoadConfig(null);
            }
        }

        public void ExportConfig(string Filename)
        {
            try
            {
                base.SaveConfigToFile(Filename);
            }
            catch (Exception exc)
            {
                MessageBox.Show("Unable to export configuration:  " + exc.Message);
            }
        }

        #endregion

        #region "Initialization"

        // public BackupSearch Searcher;        

        public MainForm(bool TrayStart)
        {
            this.TrayStart = TrayStart;
            InitializeComponent();

#           if DEBUG
            Assembly assembly = Assembly.GetExecutingAssembly();
            foreach (string s in assembly.GetManifestResourceNames())
                System.Diagnostics.Debug.WriteLine(s);
#           endif

            TrayMenu = new ContextMenu();
            TrayMenu.MenuItems.Add("&Close ZippyBackup", new EventHandler(OnCloseZippyBackup));

            TrayIcon = new NotifyIcon();
            TrayIcon.Text = "ZippyBackup";
            TrayIcon.Icon = Icon;
            TrayIcon.Visible = true;
            TrayIcon.ContextMenu = TrayMenu;
            TrayIcon.DoubleClick += new EventHandler(OnTrayDoubleClick);
            TrayIcon.BalloonTipClicked += new EventHandler(OnTrayBalloonClick);

            // Replace listBackups with a ListBoxWithIcons object.  This is a hacked way of doing it...done out of laziness.
            listBackups = new ListBoxWithIcons(listBackupsSx);
            tabBackups.Controls.Remove(listBackupsSx);
            tabBackups.Controls.Add(listBackups);
            listBackupsSx.Dispose();
            listBackupsSx = null;
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            try
            {
                RunRegistry.UpdateLegacyRegistry();

                // Fix a mistake in the app key - move from old app key location to new one...
                string NewConfiguration = (string)Registry.GetValue(AppKey, "Configuration", null);
                if (NewConfiguration == null)
                {
                    NewConfiguration = (string)Registry.GetValue(OldAppKey2, "Configuration", null);
                    if (NewConfiguration == null)
                        NewConfiguration = (string)Registry.GetValue(OldAppKey1, "Configuration", null);
                    if (NewConfiguration != null)
                    {
                        // Transfer configuration from old key location to new...
                        Registry.SetValue(AppKey, "Configuration", NewConfiguration);
                        NewConfiguration = (string)Registry.GetValue(AppKey, "Configuration", null);
                        if (NewConfiguration == null)
                        {
                            MessageBox.Show("Unable to move your configuration information to new location in registry.  This will not impact the current version of ZippyBackup, but in future versions your configuration information will be inaccessable.  Please contact the author (see About tab) if you need assistance.");
                        }
                        else
                        {
                            try
                            {
                                Registry.CurrentUser.DeleteSubKeyTree(@"Wiley Black's Software");
                            }
                            catch (Exception) { }
                            try
                            {
                                Registry.CurrentUser.OpenSubKey("Software", true).OpenSubKey("Wiley Black's Software", true).DeleteSubKeyTree("ZipBackup");
                            }
                            catch (Exception) { }
                        }
                    }
                }

                // Perform automatic updates availability check...
                AutoUpdate.ShowDebug();
                if (DateTime.Now - LastUpdateCheck > new TimeSpan(24, 0, 0))
                {
                    LastUpdateCheck = DateTime.Now;
                    if (AutoUpdate.CheckForNewerVersion(true))
                    {
                        Close();
                        return;
                    }
                }

                // Splash!
                if (Program.Splash != null)
                    Program.Splash.Status = "Loading resources...";
                LoadResources();

                if (Program.Splash != null)
                    Program.Splash.Status = "Loading configuration...";
                LoadConfig(Program.Splash);

                /** Initial setup of GUI **/
                LoadScheduleTab();                

                /** Start GUI **/
                UpdateGUI();

                labelBackups.Text = "";

                lock (MainList.Projects)
                    if (MainList.Projects.Count == 0)
                        TabControl.SelectedTab = tabManage;

                /** Verify that the necessary DLLs are present and available... **/
                ValidateDependencies();

#           if false
    Manifest test = new Manifest();
    test.Files = new List<Manifest.File>();
    Manifest.File testfile = new Manifest.File();
    testfile.Attributes = new Flags();
    testfile.Attributes.Add("FlagA");
    testfile.Attributes.Add("FlagB");
    testfile.Attributes.Add("FlagC");
    testfile.Attributes.Add("Spaced Flag");
    test.Files.Add(testfile);

    using (MemoryStream ms = new MemoryStream())
    {
        test.ToXml(ms);
        ms.Seek(0, SeekOrigin.Begin);
        byte[] content = new byte[ms.Length];
        ms.Read(content, 0, (int)ms.Length);
        string str = Encoding.UTF8.GetString(content);
        System.Diagnostics.Debug.Write("\n\n" + str + "\n\n");
    }
#           endif

                /** Enable Activity **/

                State = States.Idle;

                if (Program.Splash != null)
                    Program.Splash.Status = "Determining status...";
                GUIRefreshTimer.Enabled = true;
                GUIRefreshTimer_Tick(null, null);                

                ScheduleTimer.Enabled = true;                

                /** Splash Screen **/

                if (Program.Splash != null)
                {
                    Program.Splash.Status = "";

                    BringToFront();
                    Application.DoEvents();

                    // If the splash goes by very fast...make sure we show our colors for at least 3 seconds.
                    int Elapsed = 0;
                    while (Elapsed < 3000)
                    {
                        Elapsed = Environment.TickCount - Program.Splash.FirstShown;
                        System.Threading.Thread.Sleep(100);
                        //Application.DoEvents();
                    }
                    Program.Splash.Close();
                    Program.Splash = null;

                    Application.DoEvents();
                }

                if (TrayStart)
                {                    
                    this.WindowState = FormWindowState.Minimized;
                    this.Visible = false;
                    this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                    this.ShowInTaskbar = false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred during initialization: " + ex.Message + "\n\nDetails: " + ex.ToString());
                AllowClose = true;
                Close();
            }
        }

        void LoadResources()
        {
            try
            {
                Bitmap OkCheck = new Bitmap(Assembly.GetExecutingAssembly().GetManifestResourceStream("ZippyBackup.Resources.OkCheck.bmp"));
                Bitmap Warn = new Bitmap(Assembly.GetExecutingAssembly().GetManifestResourceStream("ZippyBackup.Resources.WarnMark.bmp"));     // Yellow
                Bitmap Question = new Bitmap(Assembly.GetExecutingAssembly().GetManifestResourceStream("ZippyBackup.Resources.QuestionMark.bmp"));    // Yellow
                Bitmap Alarm = new Bitmap(Assembly.GetExecutingAssembly().GetManifestResourceStream("ZippyBackup.Resources.AlertMark.bmp"));    // Red
                listBackups.Icons.Add(OkCheck);
                listBackups.Icons.Add(Warn);
                listBackups.Icons.Add(Question);
                listBackups.Icons.Add(Alarm);
                listBackups.IconWidth = 32;
                listBackups.IconHeight = 32;
            }
            catch (Exception ex)
            {
                throw new Exception("While loading resources: " + ex.Message);
            }
        }

        void ValidateDependencies()
        {
            /** It appears that the CLR does not load a dependency assembly until it is first needed.  Apparently, the loading/calling process
             *  can be rather complex.  But, we would like to have a graceful failure here rather than in some obscure, deep part of the code.
             *  So, we call a constructor in the Ionic DLL just to trigger it to be loaded and generate an error message if it cannot be. **/

            try
            {
                ZipFile test = new ZipFile();
                DateTime interesting = Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(Assembly.GetExecutingAssembly().Location);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Missing or invalid dependencies detected.  Please ensure that all necessary DLLs are available for ZippyBackup.  Error: " + ex.Message);
            }
        }

        #endregion

        #region "Primary list box with icons and general status"

        public enum ProjectStateIcon
        {
            Ok = 0,
            Warning = 1,
            StateUnknown = 2,
            Alarm = 3
        }

        void Populate(ListBox lb)
        {
            lb.Sorted = false;
            lb.Items.Clear();
            lock (MainList.Projects)
            {
                foreach (BackupProject bp in MainList.Projects)
                {
                    lb.Items.Add(bp);
                }
            }
        }

        void Populate(ListBoxWithIcons lb)
        {
            lb.Sorted = false;
            lb.Items.Clear();
            lock (MainList.Projects)
            {
                foreach (BackupProject bp in MainList.Projects)
                {
                    FolderStatus Status = bp.GetProjectStatus();

                    switch (Status)
                    {
                        case FolderStatus.Unknown:
                        case FolderStatus.Offline:
                        default:
                            bp.State = (int)ProjectStateIcon.StateUnknown;
                            break;
                        case FolderStatus.MissingBackup:
                        case FolderStatus.MissingSource:
                        case FolderStatus.AccessError:
                            bp.State = (int)ProjectStateIcon.Alarm;
                            break;
                        case FolderStatus.Online:
                            {                                
                                DateTime LastBackup = bp.MostRecentCompleteBackup.ToUniversalTime();
                                TimeSpan SinceLast = DateTime.UtcNow - LastBackup;

                                if (SinceLast.TotalDays > 30) bp.State = (int)ProjectStateIcon.Alarm;
                                else if (SinceLast.TotalDays > 5) bp.State = (int)ProjectStateIcon.Warning;
                                else bp.State = (int)ProjectStateIcon.Ok;
                                break;
                            }
                    }

                    lb.Items.Add(bp);
                }
            }
        }

        void Update(ListBoxWithIcons lb)
        {                        
            foreach (BackupProject bp in lb.Items)
            {
                FolderStatus Status = bp.GetProjectStatus();

                switch (Status)
                {
                    case FolderStatus.Unknown:
                    case FolderStatus.Offline:
                    default:
                        bp.State = (int)ProjectStateIcon.StateUnknown;
                        break;
                    case FolderStatus.MissingBackup:
                    case FolderStatus.MissingSource:
                    case FolderStatus.AccessError:
                        bp.State = (int)ProjectStateIcon.Alarm;
                        break;
                    case FolderStatus.Online:
                        {
                            DateTime LastBackup = bp.MostRecentCompleteBackup.ToUniversalTime();
                            TimeSpan SinceLast = DateTime.UtcNow - LastBackup;

                            if (SinceLast.TotalDays > 30) bp.State = (int)ProjectStateIcon.Alarm;
                            else if (SinceLast.TotalDays > 5) bp.State = (int)ProjectStateIcon.Warning;
                            else bp.State = (int)ProjectStateIcon.Ok;
                            break;
                        }
                }
            }
        }                        

        private void TabControl_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void GUIRefreshTimer_Tick(object sender, EventArgs e)
        {
            int Total = 0, Online = 0, Missing = 0, MissingBackups = 0, Offline = 0;
            lock (MainList.Projects)
            {
                foreach (BackupProject Project in MainList.Projects)
                {
                    FolderStatus fs = FolderStatus.Unknown;
                    try
                    {
                        if (Project.HasProjectStatusChanged() && Project.GetProjectStatus() == FolderStatus.Online && (DateTime.Now - Project.LastRefresh).TotalMinutes > 5) Project.Refresh(false);
                        fs = Project.GetProjectStatus();
                    }
                    catch (Exception) { }
                    switch (fs)
                    {
                        case FolderStatus.Online: Online++; break;
                        case FolderStatus.Offline: Offline++; break;
                        case FolderStatus.MissingSource: Missing++; break;
                        case FolderStatus.MissingBackup: Missing++; MissingBackups++; break;
                        case FolderStatus.Unknown: break;
                    }
                    Total++;
                }
            }

            Update(listBackups);

            btnRunAll.Enabled = (Total > 0) && (Offline == 0) && (Missing == 0);
            btnVerify.Enabled = (Total > 0) && (MissingBackups == 0);

            if (listBackups.SelectedIndex >= 0)
            {
                BackupProject Project = (BackupProject)listBackups.SelectedItem;
                string ss;
                FolderStatus Stat = Project.GetProjectStatus();

                DateTime LastBackup = Project.MostRecentBackup.ToUniversalTime();
                DateTime LastVerify = Project.MostRecentCompleteVerify.ToUniversalTime();
                TimeSpan SinceLast = DateTime.UtcNow - LastBackup;
                TimeSpan SinceLastVerify = DateTime.UtcNow - LastVerify;

                switch (Stat)
                {
                    case FolderStatus.Online: ss = Project.Name + " is ready for backup."; break;
                    case FolderStatus.Offline: ss = Project.Name + " is offline."; break;
                    case FolderStatus.MissingSource: ss = Project.Name + " - source directory not found."; break;
                    case FolderStatus.MissingBackup: ss = Project.Name + " - backup directory not found."; break;
                    default: ss = Project.Name + " - unable to determine status."; break;
                }

                if (Stat == FolderStatus.Online || Stat == FolderStatus.Offline)
                {
                    DateTime NoBackupThreshold = DateTime.MinValue + new TimeSpan(365, 0, 0, 0, 0);
                    if (LastBackup <= NoBackupThreshold) ss = ss + "  No backups of this project have been made.";
                    else if (SinceLast.TotalHours < 1) ss = ss + "  Last backed up less than an hour ago.";
                    else if (SinceLast.TotalDays < 1)
                    {
                        if ((int)Math.Round(SinceLast.TotalHours) == 1)
                            ss = ss + "  Last backed up 1 hour ago.";
                        else
                            ss = ss + "  Last backed up " + ((int)Math.Round(SinceLast.TotalHours)) + " hours ago.";
                    }
                    else if (SinceLast.TotalDays < 90)
                    {
                        if ((int)Math.Round(SinceLast.TotalDays) == 1)
                            ss = ss + "  Last backed up yesterday.";
                        else
                            ss = ss + "  Last backed up " + ((int)Math.Round(SinceLast.TotalDays)) + " days ago.";
                    }
                    else ss = ss + "  Last backed up on " + LastBackup.ToShortDateString() + ".";

                    if (LastVerify <= NoBackupThreshold) ss = ss + "  Backups have not been verified.";
                    else if (SinceLastVerify.TotalHours < 1) ss = ss + "  Last verified less than an hour ago.";
                    else if (SinceLastVerify.TotalDays < 1) ss = ss + "  Last verified " + ((int)Math.Round(SinceLastVerify.TotalHours)) + " hours ago.";
                    else if (SinceLastVerify.TotalDays < 90) ss = ss + "  Last verified " + ((int)Math.Round(SinceLastVerify.TotalDays)) + " days ago.";
                    else ss = ss + "  Last verified on " + LastVerify.ToShortDateString() + ".";
                }

                if (labelBackups.Text != ss) labelBackups.Text = ss;
                btnRun.Enabled = (Stat == FolderStatus.Online);
                btnRunComplete.Enabled = (Stat == FolderStatus.Online);
            }
            else
            {
                btnRun.Enabled = false;
                btnRunComplete.Enabled = false;

                if (Total == 0)
                {
                    string ss = "Please create a backup project using the Manage tab to begin.";
                    if (labelBackups.Text != ss) labelBackups.Text = ss;
                }
                else
                {                    
                    string ss = Online + " projects ready for backup.";
                    if (Offline > 0) ss = ss + "  " + Offline + " projects are offline.";
                    if (Missing > 0) ss = ss + "  " + Missing + " projects are missing folders.";
                    if (labelBackups.Text != ss) labelBackups.Text = ss;
                }
            }
        }

        #endregion

        #region "GUI Starting Points"

        void UpdateGUI()
        {
            if (RestoreForm != null) RestoreForm.UpdateGUI();

            Populate(listBackups);
            Populate(listManageBackups);

            GUIRefreshTimer_Tick(null, null);
        }

        RestoreForm RestoreForm;
        private void btnRestore_Click(object sender, EventArgs e)
        {
            if (RestoreForm != null && RestoreForm.IsDisposed) RestoreForm = null;
            if (RestoreForm == null)
            {
                RestoreForm = new RestoreForm();
                RestoreForm.Show();
            }
            else RestoreForm.BringToFront();
        }

        private void btnVerify_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    State = States.BackupInProgress;
                    lock (MainList.Projects)
                    {
                        foreach (BackupProject bp in MainList.Projects) RunVerify(bp, false);
                    }
                }
                finally
                {
                    State = States.Idle;
                }
            }
            catch (CancelException) { }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region "Management Panel"

        private void btnNew_Click(object sender, EventArgs e)
        {
            try
            {
                BackupProjectForm bpf = new BackupProjectForm();
                bpf.Project = BackupProject.CreateDefault();
                bpf.Creating = true;
                if (bpf.ShowDialog() == DialogResult.OK)
                {
                    lock (MainList.Projects)
                        MainList.Projects.Add(bpf.Project);
                    bpf.Project.Refresh();
                    UpdateGUI();                    
                    SaveConfig();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            try
            {
                BackupProject bp = listManageBackups.SelectedItem as BackupProject;
                if (bp == null) { MessageBox.Show("Please select a backup project."); return; }
                BackupProjectForm bpf = new BackupProjectForm();
                bpf.Project = bp;
                bpf.Creating = false;
                if (bpf.ShowDialog() == DialogResult.OK)
                {
                    bp.Refresh();
                    UpdateGUI();
                    SaveConfig();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnRemove_Click(object sender, EventArgs e)
        {
            try
            {
                BackupProject bp = listManageBackups.SelectedItem as BackupProject;
                if (bp == null) { MessageBox.Show("No backup project selected."); return; }
                if (MessageBox.Show("Are you sure you would like to remove the backup project '" + bp.Name + "'?  Backup files created under "
                    + "this backup project will not be deleted.", "Confirm removal", MessageBoxButtons.YesNo) != DialogResult.Yes) return;
                lock (MainList.Projects)
                    MainList.Projects.Remove(bp);
                UpdateGUI();
                SaveConfig();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnSettings_Click(object sender, EventArgs e)
        {
            try
            {                
                GlobalSettingsForm gsf = new GlobalSettingsForm();
                gsf.GlobalSettings = MainList;
                gsf.MainForm = this;
                if (gsf.ShowDialog() == DialogResult.OK)
                {
                    UpdateGUI();
                    SaveConfig();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region "Backups Tab"

        private void btnRun_Click(object sender, EventArgs e)
        {            
            try
            {
                BackupProject bp = listBackups.SelectedItem as BackupProject;
                if (bp == null) { MessageBox.Show("Please select a backup project to run."); return; }

                try
                {
                    State = States.BackupInProgress;
                    RunBackup(bp, BackupTypes.Any);
                }
                finally
                {
                    State = States.Idle;
                }
            }
            catch (CancelException) { }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnRunComplete_Click(object sender, EventArgs e)
        {            
            try
            {
                BackupProject bp = listBackups.SelectedItem as BackupProject;
                if (bp == null) { MessageBox.Show("Please select a backup project to run."); return; }

                if (!bp.IsNoBackups)
                {
                    DialogResult dr = MessageBox.Show("A full backup creates a new backup archive which includes all files from your "
                        + "backup project source folder.  This takes longer and consumes more space.  The Backup "
                        + "button automatically decides whether an incremental backup can be made instead.  Do you "
                        + "want to perform a comprehensive backup of this project anyway?",
                        "Confirm", MessageBoxButtons.YesNo);
                    if (dr != DialogResult.Yes) return;
                }

                try
                {
                    State = States.BackupInProgress;
                    RunBackup(bp, BackupTypes.Complete);
                }
                finally
                {
                    State = States.Idle;
                }
            }
            catch (CancelException) { }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }        

        private void btnRunAll_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    State = States.BackupInProgress;
                    lock (MainList.Projects)
                    {
                        foreach (BackupProject bp in MainList.Projects) RunBackup(bp, BackupTypes.Any);
                        LastBackupAll = DateTime.Now;
                    }
                }
                finally
                {
                    State = States.Idle;
                }
            }
            catch (CancelException) { }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region "Tray Menu Handlers"

        void OnCloseZippyBackup(object sender, EventArgs e)
        {
            if (!AreAnyBackupsScheduled || 
                MessageBox.Show("If you close ZippyBackup, it cannot run scheduled backups.  Are you sure you want to exit?", "Confirm", MessageBoxButtons.YesNo)
                == DialogResult.Yes)
            {
                AllowClose = true;
                Close();
            }
        }

        #endregion        

        #region "Backup and Verification launches"

        void RunBackup(BackupProject Project, BackupTypes BackupType)
        {
            bool WasShowing = Visible;
            Hide();
            GUIRefreshTimer.Enabled = false;

            try
            {
                using (BackupRun run = new BackupRun(Project))
                    run.Run(BackupType);
            }
            catch (CancelException ce) { throw ce; }
            catch (Exception ex)
            {                
                throw new Exception(ex.Message + " (816) Detail:\n\n" + ex.ToString(), ex);
            }
            finally
            {
                GUIRefreshTimer.Enabled = true;
                Project.Refresh();
                if (WasShowing) Show();
                GUIRefreshTimer_Tick(null, null);
            }
        }

        void RunVerify(BackupProject Project, bool Automatic)
        {
            bool WasShowing = Visible;
            Hide();
            GUIRefreshTimer.Enabled = false;

            try
            {
                VerificationRun run = new VerificationRun(Project);
                run.Run(Automatic);
            }
            catch (CancelException ce) { throw ce; }
            catch (Exception ex)
            {
                throw new Exception(ex.Message + " (917) Detail:\n\n" + ex.ToString(), ex);
            }
            finally
            {
                GUIRefreshTimer.Enabled = true;
                Project.Refresh();
                if (WasShowing) Show();
                GUIRefreshTimer_Tick(null, null);
            }
        }

        private void listBackupsSx_SelectedIndexChanged(object sender, EventArgs e)
        {
            // When the user actually clicks on a project, we want to get them some fresh
            // information.  So force a non-cached update of the project status for just
            // this project.  The result will become the new cached result, and 
            // GUIRefreshTimer_Tick() will respond to the update made by calling 
            // GetProjectStatus(false).
            if (listBackups.SelectedIndex >= 0)
            {
                BackupProject Project = (BackupProject)listBackups.SelectedItem;
                Project.GetProjectStatus();
            }

            GUIRefreshTimer_Tick(null, null);
        }        

        private void listManageBackups_SelectedIndexChanged(object sender, EventArgs e)
        {
            BackupProject SelProject = listManageBackups.SelectedItem as BackupProject;
            if (SelProject == null)
            {
                btnEdit.Enabled = false;
                btnRemove.Enabled = false;
            }
            else
            {
                btnEdit.Enabled = true;
                btnRemove.Enabled = true;
            }
        }

#       if false
        private string ReadTextFile(string RelativeToExecutable)
        {
            string Path = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\" + RelativeToExecutable;

            using (StreamReader Reader = new StreamReader(
        }
#       endif

        #endregion

        #region "About Box"

        private string ReadTextResource(string ResourceName)
        {
            StringBuilder sb = new StringBuilder();
            using (StreamReader sr = new StreamReader(Assembly.GetExecutingAssembly().GetManifestResourceStream(ResourceName)))
            {
                string NextLine = sr.ReadLine();
                while (NextLine != null)
                {
                    sb.AppendLine(NextLine);
                    NextLine = sr.ReadLine();
                }
            }
            return sb.ToString();
        }

        private void linkZippyBackupLicense_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.ZippyBackup.txt");
            tf.Caption = "ZippyBackup License";
            tf.ShowDialog();
        }

        private void linkDotNetZipLicense_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.DotNetZip.txt");
            tf.Caption = "DotNetZip License";
            tf.ShowDialog();
        }

        private void linkDotNetZipDonate_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://cheeso.members.winisp.net/DotNetZipDonate.aspx");
        }

        private void linkZLibLicense_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.zlib.txt");
            tf.Caption = "ZLib License";
            tf.ShowDialog();
        }

        private void linkBZip2License_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.bzip2.txt");
            tf.Caption = "BZip2 License";
            tf.ShowDialog();
        }

        private void linkAlphaVSSLicense_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.AlphaVSS.txt");
            tf.Caption = "AlphaVSS License";
            tf.ShowDialog();
        }

        private void linkAlphaFSLicense_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TextForm tf = new TextForm();
            tf.Text = ReadTextResource("ZippyBackup.Resources.License.AlphaFS.txt");
            tf.Caption = "AlphaFS License";
            tf.ShowDialog();
        }

        private void btnCheckForUpdates_Click(object sender, EventArgs e)
        {
            if (AutoUpdate.CheckForNewerVersion(false))
            {
                while (Application.OpenForms.Count > 0) Application.OpenForms[0].Close();
                return;
            }
        }

        private void btnSourceForge_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("http://sourceforge.net/p/zippybackup/wiki/Home/");
        }

        #endregion

        #region "Tray Icon Functionality"

        void OnTrayDoubleClick(object sender, EventArgs e)
        {
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.Show();
            this.WindowState = FormWindowState.Normal;            
            this.ShowInTaskbar = true;
        }

        void OnTrayBalloonClick(object sender, EventArgs e)
        {
            tabBackups.Select();
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.Show();
            this.WindowState = FormWindowState.Normal;            
            this.ShowInTaskbar = true;
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                switch (e.CloseReason)
                {
                    case CloseReason.MdiFormClosing:
                    case CloseReason.ApplicationExitCall:
                    case CloseReason.FormOwnerClosing:
                    case CloseReason.UserClosing:
                        if (!AllowClose)
                        {
                            e.Cancel = true;
                            Hide();
                        }
                        break;                   
                    case CloseReason.WindowsShutDown:     
                    case CloseReason.TaskManagerClosing:
                    case CloseReason.None:
                    default:
                        AllowClose = true;                        
                        break;
                }
                if (e.Cancel == false)
                {
                    foreach (BackupProject Project in MainList.Projects) Project.OnClosing();                    
                }
            }  
            catch (Exception) { }
        }

        private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (RestoreForm != null)
                {
                    RestoreForm.Close();
                    RestoreForm = null;
                }                

                if (TrayIcon != null)
                {
                    TrayIcon.Visible = false;
                    TrayIcon.Icon = null; // required to make icon disappear
                    TrayIcon.Dispose();
                    TrayIcon = null;
                }

                foreach (BackupProject Project in MainList.Projects) Project.OnClosed();
            }
            catch (Exception) { }
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Minimized)
            {
                this.Hide();
                this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                this.ShowInTaskbar = false;
            }
        }

        #endregion

        #region "Schedule Tab and Scheduled Operations"

        DateTime LastBackupAll = DateTime.MinValue;
        DateTime LastVerifyAll = DateTime.MinValue;        

        void LoadScheduleTab()
        {            
            cbLaunchWithWindows.Checked = RunRegistry.IsRunAtStartup();

            if (MainList.Schedule.ScheduleOnUserIdle)
                rbScheduleOnUserIdle.Checked = true;
            else if (MainList.Schedule.ScheduleRoutine)
                rbScheduleRoutine.Checked = true;
            else
                rbManualOnly.Checked = true;
            tbIdleMinutes.Text = MainList.Schedule.UserIdleMinutes.ToString();
            tbRoutineMinutes.Text = MainList.Schedule.RoutineMinutes.ToString();

            cbWarnOnAgedBackup.Checked = MainList.Schedule.WarnUserIfBackupPastDue;
            tbAlertDays.Text = MainList.Schedule.BackupPastDueAfterDays.ToString();
            tbVerifyDays.Text = MainList.Schedule.VerificationFrequencyInDays.ToString();
            cbEMailReminders.Checked = MainList.Schedule.EMailUserIfBackupPastDue;
            tbEMailFreq.Text = MainList.Schedule.EMailFrequencyInDays.ToString();
        }

        bool AreAnyBackupsScheduled
        {
            get
            {
                lock (MainList)
                    return MainList.Schedule.ScheduleOnUserIdle || MainList.Schedule.ScheduleRoutine;
            }
        }
        
        private void cbLaunchWithWindows_CheckedChanged(object sender, EventArgs e)
        {
            if (State == States.Loading) return;

            if (cbLaunchWithWindows.Checked)
                RunRegistry.MakeRunAtStartup("ZippyBackup", "/tray");
            else
                RunRegistry.ClearRunAtStartup();
        }

        Random RNG = new Random();
        IdleMonitor IdleMonitor = new IdleMonitor();
        DateTime LastScheduleError = DateTime.MinValue;
        DateTime LastReminderNag = DateTime.MinValue;
        DateTime LastReminderCheck = DateTime.MinValue;
        bool ScheduleTimer_Active = false;
        private void ScheduleTimer_Tick(object sender, EventArgs e)
        {
            if (ScheduleTimer_Active) return;           // Prevent re-entry.
            ScheduleTimer_Active = true;
            try
            {
                if ((DateTime.Now - LastScheduleError).TotalMinutes < 45) return;

                /** Automatic/Scheduled Backups **/

                try
                {
                    // If "Schedule on user idle" is checked, let's see if it's due...
                    // Perform a run-through of all the backup projects at most every 20 minutes.                
                    if (MainList.Schedule.ScheduleOnUserIdle
                     && State == States.Idle
                     && (DateTime.Now - LastBackupAll).TotalMinutes >= 20)
                    //                        && (DateTime.Now - LastBackupAll).TotalMinutes >= 2)
                    {
                        //ZippyForm.LogWriteLine(LogLevel.LightDebug, "We're at 2 minutes...");
                        lock (MainList.Projects)
                        {
                            int CompleteCount = 0;
#if true
                            // Cycle through the projects starting with a random starting project.  We do
                            // this because sometimes performing one backup can reset the idle monitor,
                            // preventing the next project from making it through.  TODO: Investigate
                            // why the idle monitor can be reset by a backup.  This might prevent the
                            // PC from sleeping!  It was happening with BlackNAS-Household Multimedia.
                            int iFirstProject = RNG.Next() % MainList.Projects.Count;
                            int ProjectsRun = 0;                            
                            for (int iProject = iFirstProject; ProjectsRun < MainList.Projects.Count; iProject++, ProjectsRun++)
                            {
                                if (iProject >= MainList.Projects.Count) iProject = 0;
                                BackupProject Project = MainList.Projects[iProject];
#else
                            foreach (BackupProject Project in MainList.Projects)
                            {
#endif
                                //ZippyForm.LogWriteLine(LogLevel.LightDebug, "Considering project '" + Project + "'.");                        
                                TimeSpan ElapsedIdleTime;
                                if (IdleMonitor.GetIdleTime(out ElapsedIdleTime))
                                {                                    
                                    //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tIdle time is at " + ElapsedIdleTime.TotalMinutes + " minutes.");                        
                                    if (ElapsedIdleTime.TotalMinutes >= MainList.Schedule.UserIdleMinutes)
                                    {
                                        LastBackupAll = DateTime.Now;

                                        FolderStatus Stat = Project.GetProjectStatus();
                                        if (Stat == FolderStatus.Online)
                                        {
                                            //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tProject is online.");
                                            DateTime LastBackup = Project.MostRecentBackup.ToUniversalTime();
                                            DateTime LastCompleteBackup = Project.MostRecentCompleteBackup.ToUniversalTime();
                                            TimeSpan SinceLast = DateTime.UtcNow - LastBackup;
                                            TimeSpan SinceLastComplete = DateTime.UtcNow - LastCompleteBackup;
                                            //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tSinceLast = " + SinceLast.TotalMinutes + " minutes.");
                                            //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tSinceLastComplete = " + SinceLastComplete.TotalMinutes + " minutes.");
                                            if (SinceLast.TotalMinutes > 20
                                                //if(SinceLast.TotalMinutes > 2
                                            && SinceLast.TotalMinutes > MainList.Schedule.UserIdleMinutes
&& SinceLastComplete.TotalMinutes > 240            // Hack, for now, to prevent BlackNAS-Household Media from reseting the idle counter and preventing further backups.
                                            && SinceLastComplete.TotalMinutes > ElapsedIdleTime.TotalMinutes)
                                            {
                                                //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tProject being executed.");
                                                try
                                                {
                                                    State = States.BackupInProgress;
                                                    RunBackup(Project, BackupTypes.IncrementalAutomatic);
                                                    SinceLastComplete = DateTime.UtcNow - LastCompleteBackup;
                                                }
                                                catch (CancelException)
                                                {
                                                    //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tProject cancelled.");
                                                }
                                                catch (Exception exc)
                                                {
                                                    //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tProject exception.");
                                                    TimeSpan SinceEMail = DateTime.UtcNow - LastReminderEMail;
                                                    if (ZippyForm.MainList.Schedule.EMailUserIfBackupPastDue && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                                    {
                                                        ZippyForm.SendEMail("ZippyBackup Alert", "Error during scheduled backup of '" + Project.Name + "' occurred at " + DateTime.Now.ToString("g") + ":  "
                                                            + exc.Message);
                                                    }
                                                    throw exc;
                                                }
                                                finally
                                                {
                                                    State = States.Idle;
                                                }
                                                //ZippyForm.LogWriteLine(LogLevel.LightDebug, "\tBack to iterating through backups.");
                                            }
                                            if (SinceLastComplete.TotalMinutes < 20) CompleteCount++;
                                        }
                                        else ZippyForm.LogWriteLine(LogLevel.LightDebug, "Skipping project '" + Project.Name + "' because its state is " + Stat.ToString());
                                    }
                                }
                            }
                        }
                    }

                    // If "Schedule routinely" is checked, let's see if it's due...                
                    if (MainList.Schedule.ScheduleRoutine
                     && State == States.Idle
                     && (DateTime.Now - LastBackupAll).TotalMinutes >= MainList.Schedule.RoutineMinutes)
                    {
                        LastBackupAll = DateTime.Now;

                        lock (MainList.Projects)
                        {
                            foreach (BackupProject Project in MainList.Projects)
                            {
                                FolderStatus Stat = Project.GetProjectStatus();
                                if (Stat == FolderStatus.Online)
                                {
                                    DateTime LastBackup = Project.MostRecentBackup.ToUniversalTime();
                                    TimeSpan SinceLast = DateTime.UtcNow - LastBackup;
                                    if (SinceLast.TotalMinutes > MainList.Schedule.RoutineMinutes)
                                    {
                                        try
                                        {
                                            State = States.BackupInProgress;
                                            RunBackup(Project, BackupTypes.Incremental);
                                        }
                                        catch (CancelException) { }
                                        catch (Exception exc)
                                        {
                                            TimeSpan SinceEMail = DateTime.UtcNow - LastReminderEMail;
                                            if (ZippyForm.MainList.Schedule.EMailUserIfBackupPastDue && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                            {
                                                ZippyForm.SendEMail("ZippyBackup Alert", "Error during scheduled backup of '" + Project.Name + "' occurred at " + DateTime.Now.ToString("g") + ":  "
                                                    + exc.Message);
                                            }
                                            throw exc;
                                        }
                                        finally
                                        {
                                            State = States.Idle;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (CancelException) { LastScheduleError = DateTime.Now; }
                catch (NoCompleteBackupException) { LastScheduleError = DateTime.Now; }
                catch (Exception ex)
                {
                    ScheduleTimer.Enabled = false;
                    this.FormBorderStyle = FormBorderStyle.FixedSingle;
                    this.Show();
                    this.WindowState = FormWindowState.Normal;
                    this.ShowInTaskbar = true;
                    if ((int)MainList.Logging < (int)LogLevel.Errors)
                        MessageBox.Show("ZippyBackup encountered an error while performing an automatic backup:  " + ex.Message);
                    else
                        ZippyForm.LogWriteLine(LogLevel.Errors, "During an automatic backup: " + ex.Message);
                    LastScheduleError = DateTime.Now;
                    ScheduleTimer.Enabled = true;
                }

                /** Automatic/Scheduled Verifications **/

                try
                {
                    // If "Schedule on user idle" is checked, let's see if it's due...
                    // Perform a run-through of all the backup projects at most every 20 minutes.                
                    if (MainList.Schedule.ScheduleOnUserIdle
                     && State == States.Idle
                     && (DateTime.Now - LastVerifyAll).TotalMinutes >= 20)
                    {
                        lock (MainList.Projects)
                        {
                            foreach (BackupProject Project in MainList.Projects)
                            {
                                TimeSpan ElapsedIdleTime;
                                if (IdleMonitor.GetIdleTime(out ElapsedIdleTime))
                                {
                                    if (ElapsedIdleTime.TotalMinutes >= MainList.Schedule.UserIdleMinutes)
                                    {
                                        LastVerifyAll = DateTime.Now;

                                        FolderStatus Stat = Project.GetProjectStatus();
                                        if (Stat == FolderStatus.Online)
                                        {
                                            DateTime LastVerify = Project.MostRecentVerify.ToUniversalTime();
                                            TimeSpan SinceLast = DateTime.UtcNow - LastVerify;
                                            DateTime LastCompleteVerify = Project.MostRecentCompleteVerify.ToUniversalTime();
                                            TimeSpan SinceLastComplete = DateTime.UtcNow - LastCompleteVerify;
                                            if (SinceLast.TotalMinutes > 20
                                             && SinceLast.TotalMinutes > MainList.Schedule.UserIdleMinutes
                                             && SinceLastComplete.TotalDays > MainList.Schedule.VerificationFrequencyInDays)
                                            {
                                                try
                                                {
                                                    State = States.BackupInProgress;
                                                    RunVerify(Project, true);
                                                }
                                                catch (CancelException) { }
                                                catch (Exception exc)
                                                {
                                                    TimeSpan SinceEMail = DateTime.UtcNow - LastReminderEMail;
                                                    if (ZippyForm.MainList.Schedule.EMailUserIfBackupPastDue && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                                    {
                                                        ZippyForm.SendEMail("ZippyBackup Alert", "Error during scheduled verification of '" + Project.Name + "' occurred at " + DateTime.Now.ToString("g") + ":  "
                                                            + exc.Message);
                                                    }
                                                    throw exc;
                                                }
                                                finally
                                                {
                                                    State = States.Idle;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // If "Schedule routinely" is checked, let's see if it's due...                
                    if (MainList.Schedule.ScheduleRoutine
                     && State == States.Idle
                     && (DateTime.Now - LastVerifyAll).TotalMinutes >= MainList.Schedule.RoutineMinutes)
                    {
                        LastVerifyAll = DateTime.Now;

                        lock (MainList.Projects)
                        {
                            foreach (BackupProject Project in MainList.Projects)
                            {
                                FolderStatus Stat = Project.GetProjectStatus();
                                if (Stat == FolderStatus.Online)
                                {
                                    DateTime LastVerify = Project.MostRecentVerify.ToUniversalTime();
                                    TimeSpan SinceLast = DateTime.UtcNow - LastVerify;
                                    DateTime LastCompleteVerify = Project.MostRecentCompleteVerify.ToUniversalTime();
                                    TimeSpan SinceLastComplete = DateTime.UtcNow - LastCompleteVerify;
                                    if (SinceLast.TotalMinutes > MainList.Schedule.RoutineMinutes && SinceLastComplete.TotalDays > MainList.Schedule.VerificationFrequencyInDays)
                                    {
                                        try
                                        {
                                            State = States.BackupInProgress;
                                            RunVerify(Project, true);
                                        }
                                        catch (CancelException) { }
                                        catch (Exception exc)
                                        {
                                            TimeSpan SinceEMail = DateTime.UtcNow - LastReminderEMail;
                                            if (ZippyForm.MainList.Schedule.EMailUserIfBackupPastDue && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                            {
                                                ZippyForm.SendEMail("ZippyBackup Alert", "Error during scheduled verification of '" + Project.Name + "' occurred at " + DateTime.Now.ToString("g") + ":  "
                                                    + exc.Message);
                                            }
                                            throw exc;
                                        }
                                        finally
                                        {
                                            State = States.Idle;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (CancelException) { LastScheduleError = DateTime.Now; }
                catch (NoCompleteBackupException) { LastScheduleError = DateTime.Now; }
                catch (Exception ex)
                {
                    ScheduleTimer.Enabled = false;
                    this.FormBorderStyle = FormBorderStyle.FixedSingle;
                    this.Show();
                    this.WindowState = FormWindowState.Normal;
                    this.ShowInTaskbar = true;
                    if ((int)MainList.Logging < (int)LogLevel.Errors)
                        MessageBox.Show("ZippyBackup encountered an error while performing an automatic verification:  " + ex.Message);
                    else
                        ZippyForm.LogWriteLine(LogLevel.Errors, "During an automatic verification: " + ex.Message);
                    LastScheduleError = DateTime.Now;
                    ScheduleTimer.Enabled = true;
                }

                /** Nag/Reminders **/

                try
                {
                    // Nag the user about an outdated backup at most once per hour.  Check for outdated backups
                    // at most once every 20 minutes.                
                    bool ReadyToNag = false;
                    bool ReadyToEMail = false;
                    TimeSpan SinceEMail = new TimeSpan();
                    if ((DateTime.Now - LastReminderCheck).TotalMinutes >= 20 && State == States.Idle)
                    {
                        if (MainList.Schedule.WarnUserIfBackupPastDue) ReadyToNag |= (DateTime.Now - LastReminderNag).TotalMinutes >= 60;
                        if (MainList.Schedule.EMailUserIfBackupPastDue)
                        {
                            SinceEMail = DateTime.UtcNow - LastReminderEMail;
                            ReadyToEMail |= (SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays);
                        }
                    }
                    if (ReadyToNag || ReadyToEMail)
                    {
                        LastReminderCheck = DateTime.Now;

                        TimeSpan Oldest = new TimeSpan(0);
                        lock (MainList.Projects)
                        {
                            foreach (BackupProject Project in MainList.Projects)
                            {
                                if (Project.DoNotRemind) continue;
                                FolderStatus Stat = Project.GetProjectStatus();
                                if (Stat == FolderStatus.Online)
                                {
                                    DateTime LastBackup = Project.MostRecentBackup.ToUniversalTime();
                                    TimeSpan SinceLast = DateTime.UtcNow - LastBackup;
                                    if (SinceLast > Oldest) Oldest = SinceLast;
                                }
                            }
                        }

                        if (Oldest.TotalMinutes > (MainList.Schedule.BackupPastDueAfterDays * 24 /*hours/day*/ * 60 /*minutes/hour*/))
                        {
                            string EMailMsg = null;

                            if (Oldest.TotalDays > 1000)
                            {
                                if (ReadyToNag)
                                {
                                    LastReminderNag = DateTime.Now;
                                    TrayIcon.ShowBalloonTip(
                                        15000,
                                        "ZippyBackup Reminder",
                                        "One or more of your backup projects has no backups.  Click here to review "
                                        + "your backup projects.",
                                        ToolTipIcon.Warning
                                        );
                                }

                                if (ReadyToEMail && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                    EMailMsg = "One or more of your backup projects has no backups.";
                            }
                            else
                            {
                                if (ReadyToNag)
                                {
                                    LastReminderNag = DateTime.Now;
                                    TrayIcon.ShowBalloonTip(
                                        15000,
                                        "ZippyBackup Reminder",
                                        "One or more of your backup projects has not been backed up in "
                                        + ((int)Math.Round(Oldest.TotalDays)).ToString() + " days.  Click here to review "
                                        + "your backup projects.",
                                        ToolTipIcon.Warning
                                        );
                                }

                                if (ReadyToEMail && SinceEMail.TotalDays >= MainList.Schedule.EMailFrequencyInDays)
                                    EMailMsg = "One or more of your backup projects has not been backed up in " + ((int)Math.Round(Oldest.TotalDays)).ToString() + " days.";
                            }

                            if (!string.IsNullOrEmpty(EMailMsg))
                            {
                                LastReminderEMail = DateTime.UtcNow;

                                try
                                {
                                    SendEMail("ZippyBackup Alert", EMailMsg);
                                }
                                catch (Exception exc)
                                {
                                    ZippyForm.LogWriteLine(LogLevel.Warnings,
                                        "ZippyBackup was unable to send a reminder e-mail about your backups.  Please review your ZippyBackup e-mail settings.  Error: "
                                        + exc.Message);

                                    MessageBox.Show("ZippyBackup was unable to send a reminder e-mail about your backups.  Please review your ZippyBackup e-mail settings.  Error: "
                                        + exc.Message);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ScheduleTimer.Enabled = false;
                    this.FormBorderStyle = FormBorderStyle.FixedSingle;
                    this.Show();
                    this.WindowState = FormWindowState.Normal;
                    this.ShowInTaskbar = true;
                    ZippyForm.LogWriteLine(LogLevel.Errors, "ZippyBackup encountered an error while checking the status of your backups: " + ex.Message);
                    MessageBox.Show("ZippyBackup encountered an error while checking the status of your backups:  " + ex.Message);
                    LastScheduleError = DateTime.Now;
                    ScheduleTimer.Enabled = true;
                }
            }
            finally
            {
                ScheduleTimer_Active = false;
            }
        }

        void OnSchedulingChange()
        {
            MainList.Schedule.ScheduleOnUserIdle = rbScheduleOnUserIdle.Checked;
            MainList.Schedule.ScheduleRoutine = rbScheduleRoutine.Checked;            
            SaveConfig();
        }

        private void rbManualOnly_CheckedChanged(object sender, EventArgs e)
        {
            OnSchedulingChange();
        }

        private void rbScheduleOnUserIdle_CheckedChanged(object sender, EventArgs e)
        {
            OnSchedulingChange();
        }

        private void rbScheduleRoutine_CheckedChanged(object sender, EventArgs e)
        {
            OnSchedulingChange();
        }

        private void tbIdleMinutes_TextChanged(object sender, EventArgs e)
        {
            int NewVal;
            if (int.TryParse(tbIdleMinutes.Text, out NewVal))
                MainList.Schedule.UserIdleMinutes = NewVal;
            SaveConfig();
        }

        private void tbRoutineMinutes_TextChanged(object sender, EventArgs e)
        {
            int NewVal;
            if (int.TryParse(tbRoutineMinutes.Text, out NewVal))
                MainList.Schedule.RoutineMinutes = NewVal;
            SaveConfig();
        }

        private void cbWarnOnAgedBackup_CheckedChanged(object sender, EventArgs e)
        {
            MainList.Schedule.WarnUserIfBackupPastDue = cbWarnOnAgedBackup.Checked;
            cbEMailReminders.Enabled = MainList.Schedule.WarnUserIfBackupPastDue;
            SaveConfig();
        }

        private void tbAlertDays_TextChanged(object sender, EventArgs e)
        {
            int NewVal;
            if (int.TryParse(tbAlertDays.Text, out NewVal))
                MainList.Schedule.BackupPastDueAfterDays = NewVal;
            SaveConfig();
        }

        private void tbVerifyDays_TextChanged(object sender, EventArgs e)
        {
            int NewVal;
            if (int.TryParse(tbVerifyDays.Text, out NewVal))
                MainList.Schedule.VerificationFrequencyInDays = NewVal;
            SaveConfig();
        }

        private void cbEMailReminders_CheckedChanged(object sender, EventArgs e)
        {
            if (cbEMailReminders.Checked && !AreEMailSettingsValid())
            {
                MessageBox.Show("Please configure valid e-mail settings before enabling this option.");
                MainList.Schedule.EMailUserIfBackupPastDue = false;
                cbEMailReminders.Checked = false;
            }
            else if (MainList.Schedule.EMailUserIfBackupPastDue != cbEMailReminders.Checked)
            {
                MainList.Schedule.EMailUserIfBackupPastDue = cbEMailReminders.Checked;
                SaveConfig();
            }
        }

        private void tbEMailFreq_TextChanged(object sender, EventArgs e)
        {
            int NewVal;
            if (int.TryParse(tbEMailFreq.Text, out NewVal))
                MainList.Schedule.EMailFrequencyInDays = NewVal;
            SaveConfig();
        }

        bool AreEMailSettingsValid()
        {
            return !string.IsNullOrEmpty(MainList.Schedule.EMailSettings.EMailFrom)
                && !string.IsNullOrEmpty(MainList.Schedule.EMailSettings.EMailTo)
                && !string.IsNullOrEmpty(MainList.Schedule.EMailSettings.Password.Password)
                && !string.IsNullOrEmpty(MainList.Schedule.EMailSettings.SMTPServer)
                && !string.IsNullOrEmpty(MainList.Schedule.EMailSettings.Username);
        }

        private void btnEMailSettings_Click(object sender, EventArgs e)
        {
            EMailSettingsForm EMail = new EMailSettingsForm();
            EMail.Settings = MainList.Schedule.EMailSettings;
            if (EMail.ShowDialog() == DialogResult.OK)
            {
                MainList.Schedule.EMailSettings = EMail.Settings;
                SaveConfig();
            }
        }

        #endregion
    }

    public class IdleMonitor
    {
        [DllImport("User32.dll")]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

        [StructLayout(LayoutKind.Sequential)]
        internal struct LASTINPUTINFO
        {
            public uint cbSize;
            public uint dwTime;
        }

        public IdleMonitor()
        {
        }

        DateTime LastInputCheck = DateTime.Now;
        DateTime LastHibernateResume = DateTime.MinValue;

        private bool GetLastUserInput(out DateTime LastInput)
        {
            try
            {
                LASTINPUTINFO lastInputInfo = new LASTINPUTINFO();
                lastInputInfo.cbSize = (uint)Marshal.SizeOf(lastInputInfo);
                bool ret = GetLastInputInfo(ref lastInputInfo);
                LastInput = DateTime.Now.AddMilliseconds(-(Environment.TickCount - lastInputInfo.dwTime));
                return ret;
            }
            catch (Exception) { LastInput = DateTime.Now; return false; }
        }

        public bool GetIdleTime(out TimeSpan Elapsed)
        {
            DateTime LastInput;
            if (!GetLastUserInput(out LastInput)) { Elapsed = TimeSpan.Zero; return false; }

            TimeSpan SinceLastCheck = (DateTime.Now - LastInputCheck);
            LastInputCheck = DateTime.Now;

            if (SinceLastCheck.TotalMinutes >= 5)
            {
                // We have not been allowed to check the idle time for more than 5 minutes.  This
                // occurs when the PC hibernates and the CPU does not run - therefore we never get
                // a chance to run this code & update.

                // Resuming from a hibernate can be considered a user action in itself, so we want
                // to start counting from that time.  GetLastUserInput(), however, will likely be
                // indicating a time from before hibernation.

                LastHibernateResume = DateTime.Now;
            }

            if (LastInput > LastHibernateResume) Elapsed = DateTime.Now - LastInput;
            else Elapsed = DateTime.Now - LastHibernateResume;
            return true;
        }
    }
}
